name: Publish to NPM

on:
    workflow_call:
        inputs:
            updated:
                description: 'JSON Array of updated packages'
                required: true
                type: string

permissions:
    contents: write

env:
    GRAPHQL_SCHEMA_FILE: '${{ github.workspace }}/schema.graphql'

jobs:
    generate_schema:
        name: Generate WPGraphQL schema
        uses: './.github/workflows/generate-schema.yml'
        with:
            ref: 'main'
        secrets: inherit

    publish:
        runs-on: ubuntu-latest
        needs: generate_schema

        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version-file: '.nvmrc'

            - name: Get generated schema
              uses: actions/download-artifact@v4
              with:
                  name: schema
                  path: /tmp/schema

            - name: Move schema to workspace
              run: |
                  cp /tmp/schema/schema.graphql ${{ github.workspace }}/schema.graphql

            - name: Install dependencies
              run: npm ci

            - name: Build
              run: npm run build

            - name: Authenticate with npm
              run: echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc

            - name: Publish to NPM
              run: |
                  sudo apt install jq
                  declare -a package_array=($(echo '${{ inputs.updated }}' | jq -r '.[]'))
                  for package in "${package_array[@]}"; do
                    echo "Publishing $package"
                    location="$(npm query ".workspace#$package" | jq -r '.[0].location')"
                    version="$(npm query ".workspace#$package" | jq -r '.[0].version')"
                    private="$(npm query ".workspace#$package" | jq -r '.[0].private')"
                    if [ "$private" == "true" ]; then
                      echo "Skipping publishing private package $package"
                      tag_exists_on_github=$(gh api -X GET "/repos/${{ github.repository }}/releases/tags/$package@$version" &> /dev/null && echo true || echo false)
                      if [ "$tag_exists_on_github" == "true" ]; then
                        echo "Tag $package@$version already exists on GitHub. Skipping creating a new tag."
                      else
                        echo "Creating release $package@$version on GitHub"
                        bash '${{ github.workspace }}/.github/scripts/release_content.sh' "${{ github.workspace }}/$location/CHANGELOG.md" "$version"
                        gh release create "$package@$version" --title "$package@$version" --notes-file /tmp/changelog.md
                      fi
                      continue
                    else
                      npm publish --access public --workspace "$location" "$package"
                      # Make a GitHub Release
                      bash '${{ github.workspace }}/.github/scripts/release_content.sh' "${{ github.workspace }}/$location/CHANGELOG.md" "$version"
                      gh release create "$package@$version" --title "$package@$version" --notes-file /tmp/changelog.md
                    fi
                  done

                  git fetch origin main
                  git fetch origin develop --shallow-since="$(git log -1 --pretty=format:"%aI" origin/main)"
                  git pull --set-upstream origin develop:main
                  git push origin develop:main
              env:
                  NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
                  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
